<?php

/**
 * @file
 * Integrates the Chado Phylotree module with Drupal Nodes & Views
 */

/**
 * @defgroup tripal_phylotree Phylotree Module
 * @ingroup tripal_modules
 * @{
 * Integrates the Chado Phylotree module with Drupal Nodes
 * @}
 */
require_once 'theme/tripal_phylotree.theme.inc';
require_once 'includes/tripal_phylotree.admin.inc';
require_once 'includes/tripal_phylotree.chado_node.inc';

/**
 * Implements hook_permission().
 *
 * Set the permission types that the chado module uses.  Essentially we
 * want permissionis that protect creation, editing and deleting of chado
 * data objects
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_permission() {
  return array(
    'access chado_phylotree content' => array(
      'title' => t('View Phylotrees'),
      'description' => t('Allow users to view phylotree pages.'),
    ),
    'administer tripal phylotree' => array(
      'title' => t('Administer Phylotrees'),
      'description' => t('Allow users to administer all phylotrees.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_menu() {
  $items = array();

  // administration landing page. currently has no content but is
  // apparently required for the Sync and Help links to work.
  $items['admin/tripal/extension/tripal_phylotree'] = array(
    'title' => 'Phylotrees',
    'description' => 'Phylogenetic trees & gene families',
    'page callback' => 'tripal_phylotree_admin_phylotrees_listing',
    'access arguments' => array('administer tripal phylotree'),
    'type' => MENU_NORMAL_ITEM,
  );

  // help menu
  $items['admin/tripal/extension/tripal_phylotree/help'] = array(
    'title' => 'Help',
    'description' => 'Basic Description of Tripal Phylotree Module Functionality',
    'page callback' => 'theme',
    'page arguments' => array('tripal_phylotree_help'),
    'access arguments' => array('administer tripal phylotree'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  // configuration menu item
  $items['admin/tripal/extension/tripal_phylotree/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Configure the Tripal Phylotree module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_phylotree_admin'),
    'access arguments' => array('administer tripal phylotree'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  // sync menu item (will be rendered as a tab by tripal)
  $items['admin/tripal/extension/tripal_phylotree/sync'] = array(
    'title' => ' Sync',
    'description' => 'Create pages on this site for phylotrees stored in Chado',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chado_node_sync_form', 'tripal_phylotree', 'chado_phylotree'),
    'access arguments' => array('administer tripal phylotree'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );
  
   $items['chado_phylotree/%'] = array(
    'page callback' => 'phylotree_by_name',
    'page arguments' => array(1),
    'access callback' => TRUE // allow all anonymous http clients
   );

   $items['chado_gene_phylotree/%/text'] = array(
    'page callback' => 'phylotree_by_genename_text',
    // found this strategy described here: http://stackoverflow.com/questions/2285944/returning-untemplated-output-in-drupal-from-menu-callback-function
    // not sure if it has advantages over the simpler approach described in the top answer, but seemed worth exploring
    'delivery callback' => 'tripal_phylotree_text_deliver',
    'page arguments' => array(1),
    'access callback' => TRUE // allow all anonymous http clients
   );
  
  
   // create a route for viewing json of all phylonodes having this phylotree_id
   $items['chado_phylotree/%/json'] = array(
    'page callback' => 'phylotree_json',
    'page arguments' => array(1),
    'access callback' => TRUE // allow all anonymous http clients
   );

   //Userinfo details will be available at this path via hook_menu 
     $items['search/phylotree/userinfo'] = array(
       'title' => 'Userinfo',
       'page callback' => 'userinfo_content',
       'access callback' => TRUE, //visible to anonymous users
     );
   
  return $items;
}

//Userinfo hook_menu callback to hook_theme
function userinfo_content() {
  return theme('tripal_phylotree_userinfo');
}


/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_views_api() {
    $path = drupal_get_path('module', 'tripal_phylotree');
    return array(
        'api' => 3.0,
        'path' => $path . '/includes/views',
        'template path' => $path .'/themes'
    );
}

/**
 * Implements hook_search_biological_data_views().
 * Adds the described views to the "Search Data" Page created by Tripal Views
 *
 * @ingroup tripal_phylotree
 */

function tripal_phylotree_search_biological_data_views() {
  return array(
      'tripal_phylotree_user_phylotree' => array(
          'machine_name' => 'tripal_phylotree_user_phylotree',
          'human_name' => 'Phylotrees',
          'description' => 'Gene trees, species trees, etc.',
          'link' => 'chado/phylotree'
    ),
  );
}

/**
 *  Implements hook_theme().
 *
 * We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_theme($existing, $type, $theme, $path) {
  $core_path = drupal_get_path('module', 'tripal_core');
  $items = array(
    // built-in theme
    'node__chado_phylotree' => array(
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates",
    ),
    // base template for this page (default tab) includes the phylogram 
    'tripal_phylotree_base' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_base',
      'path' => "$path/theme/templates",
    ),
    // partial for organisms block
    'tripal_phylotree_organisms' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_organisms',
      'path' => "$path/theme/templates",
    ),
    // partial for phylotree radial block
    'tripal_phylotree_radial' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_radial',
      'path' => "$path/theme/templates",
    ),
    // partial for cross references block
    'tripal_phylotree_references' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_references',
      'path' => "$path/theme/templates",
    ),
    // partial for cross references block
    'tripal_phylotree_analysis' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_analysis',
      'path' => "$path/theme/templates",
    ),
    // partial for teaser view
    'tripal_phylotree_teaser' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_teaser',
      'path' => "$path/theme/templates",
    ),
    //Userinfo template 
    'tripal_phylotree_userinfo' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_userinfo',
      'path' => "$path/theme/templates",
    ),

  );
  return $items;
}

/**
 * Implements hook_help().
 * Adds a help page to the module list
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_help ($path, $arg) {
  if ($path == 'admin/help#tripal_phylotree') {
    return theme('tripal_phylotree_help', array());
  }
}

function tripal_phylotree_text_deliver($page_callback_result) {
	print $page_callback_result;
	drupal_exit();
}

  
/**
 *@ Userinfo block: A block at the top with userinfo/Help
 */

/**
 * Implement hook_block_info().
 * Define a block to appear at the top of the module(tripal_phyloptree) view/page.
 */
function tripal_phylotree_block_info() {
  $blocks['tripal_phylotree_userinfo_block'] = array(  //the block-id (prefix with module name to avoid namespace conflict)
    'info' => t('User info block at top of tripal_phylotree view.'),
    'status' => TRUE,
    'region' => 'highlighted', 
    'weight' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED, // appears only in listed paths
    'pages' => "search/phylotree", // block appears only in this path
  );
  return $blocks;
}    //end: _block_info


/**
 * Implements hook_block_view().
 *   The block content 
 */
function tripal_phylotree_block_view($delta='') {
  $block = array();
  switch ($delta) { 
    case 'tripal_phylotree_userinfo_block':  //if this is the block-ID
      //a heading
      $block['subject'] = t('<span align="center" style="font-size:100%">Phylotree: Gene Family Search</span>');
      // block text from f()
      $block['content'] = theblock_contents();
      break;
  }
  return $block;
}    //end: _block_view


/**
  * the userinfo block content 
  * return string
  */
function theblock_contents() {
  return '<span style="font-family:times">Search for gene families starting from a Phytozome family ID (phytozome_10_2.59192412) or a word from the gene description/name/function, e.g., iron homeostasis or chlorophyll binding protein.  </span>(<a href="/search/phylotree/userinfo" arget="_blank">More help</a>)';
}

/* End: block at the top with user help info*/


// hack to suppress the 'Submitted by...' info drupal adds to nodes
$variables['display_submitted'] = FALSE;
