<?php
$variables['display_submitted'] = FALSE;

/**
 * @file
 * Integrates the Chado Phylotree module with Drupal Nodes & Views
 */

/**
 * @defgroup tripal_phylotree Phylotree Module
 * @ingroup tripal_modules
 * @{
 * Integrates the Chado Phylotree module with Drupal Nodes
 * @}
 */
require_once 'theme/tripal_phylotree.theme.inc';
require_once 'includes/tripal_phylotree.admin.inc';
require_once 'includes/tripal_phylotree.chado_node.inc';

/**
 * Implements hook_permission().
 *
 * Set the permission types that the chado module uses.  Essentially we
 * want permissionis that protect creation, editing and deleting of chado
 * data objects
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_permission() {
  return array(
    'access chado_phylotree content' => array(
      'title' => t('View Phylotrees'),
      'description' => t('Allow users to view phylotree pages.'),
    ),
    'administer tripal phylotree' => array(
      'title' => t('Administer Phylotrees'),
      'description' => t('Allow users to administer all phylotrees.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_menu() {
  $items = array();

  // administration landing page. currently has no content but is
  // apparently required for the Sync and Help links to work.
  $items['admin/tripal/extension/tripal_phylotree'] = array(
    'title' => 'Phylotrees',
    'description' => 'Phylogenetic trees & gene families',
    'page callback' => 'tripal_phylotree_admin_phylotrees_listing',
    'access arguments' => array('administer tripal phylotree'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  // help menu 
  $items['admin/tripal/extension/tripal_phylotree/help'] = array(
    'title' => 'Help',
    'description' => 'Basic Description of Tripal Phylotree Module Functionality',
    'page callback' => 'theme',
    'page arguments' => array('tripal_phylotree_help'),
    'access arguments' => array('administer tripal phylotree'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  // configuration menu item
  $items['admin/tripal/extension/tripal_phylotree/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Configure the Tripal Phylotree module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_phylotree_admin'),
    'access arguments' => array('administer tripal phylotree'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  // sync menu item (will be rendered as a tab by tripal)
  $items['admin/tripal/extension/tripal_phylotree/sync'] = array(
    'title' => ' Sync',
    'description' => 'Create pages on this site for phylotrees stored in Chado',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chado_node_sync_form', 'tripal_phylotree', 'chado_phylotree'),
    'access arguments' => array('administer tripal phylotree'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );

  // create a route for viewing json of phylotree and all it's phylonodes
   $items['chado_phylotree/%/json'] = array(
    'page callback' => 'phylotree_json',
    'page arguments' => array(1),
    'access arguments' => array('access chado_phylotree content'),
   );

   // create a route for viewing json of phylotree organism data
   $items['chado_phylotree_organisms/%/json'] = array(
    'page callback' => 'phylotree_organism_json',
    'page arguments' => array(1),
    'access arguments' => array('access chado_phylotree content'),
   );
   
  return $items;
}

// generate json counting features per organism in this gene tree
function phylotree_organism_json($phylotree_id) {

  /* query using inner join, to exclude phylonodes without feature info
     e.g. the ncbi taxonony tree */
  $sql = 'SELECT n.phylonode_id, n.label AS node_name, '.
    'f.name as feature_name, '.
    'o.organism_id, o.genus, o.species, o.common_name, ' .
    'cvt.name as cvterm_name, cvt.definition as cvterm_definition '.
    'FROM chado.phylonode n '.
    'LEFT OUTER JOIN chado.cvterm cvt ON n.type_id = cvt.cvterm_id '.
    'INNER JOIN chado.feature f ON n.feature_id = f.feature_id ' .
    'INNER JOIN chado.organism o ON f.organism_id = o.organism_id '.
    'WHERE n.phylotree_id = :phylotree_id';

//  dd($sql);
  
  $args = array(':phylotree_id' => $phylotree_id);
  $result = chado_query( $sql, $args );

  $data = array();
  foreach ($result as $r) {
    if(! array_key_exists($r->organism_id, $data)) {
      $data[$r->organism_id] = array (
        'organism_id' => $r->organism_id,
        'value' => 1,
        'name' => sprintf('%s %s', $r->genus, $r->species),
        'children' => null,
      );
    }
    else {
      $data[$r->organism_id]['value'] ++;
    }
  }

  $result = array();
  foreach($data as $key => $value) {
    $result[] = $value;
  }
  
  drupal_json_output($result);
}

// generate json describing the tree structure
// TODO: write json schema and implement schema endpoint
function phylotree_json($phylotree_id) {

  $sql = 'SELECT n.phylonode_id, n.parent_phylonode_id, n.label as name, '.
    'n.distance as length, f.feature_id, f.name as feature_name, '.
    'cvt.name as cvterm_name, cvt.definition as cvterm_definition '.
    'FROM chado.phylonode n '.
    'LEFT OUTER JOIN chado.cvterm cvt ON n.type_id = cvt.cvterm_id '.
    'LEFT OUTER JOIN chado.feature f ON n.feature_id = f.feature_id ' .
    'WHERE n.phylotree_id = :phylotree_id';
  dd($sql);
  
  $args = array(':phylotree_id' => $phylotree_id);
  $result = chado_query( $sql, $args );

  // fetch all the phylonodes into an assoc array indexed by
  // phylonode_id.  convert into from resultset record to array,
  // fixing datatypes. chado_query returns numeric as string and fun
  // stuff like that.
  $phylonodes = array();
  $root_phylonode_ref = null;
  
  foreach ($result as $r) {
    $phylonode_id = (int) $r->phylonode_id;
    $node = array(
      'phylonode_id' => $phylonode_id,
      'parent_phylonode_id' => (int) $r->parent_phylonode_id,
      'name' => $r->name,
      'length' => (double) $r->length,
      'feature_id' => (int) $r->feature_id,
      'feature_name' => $r->feature_name,
      'cvterm_name' => $r->cvterm_name,
      'cvterm_definition' => $r->cvterm_definition,
    );
    $phylonodes[$phylonode_id] = $node;
  }
  
  //populate the branchset[] arrays for each node
  foreach( $phylonodes as $key => &$node ) {
    if($node['parent_phylonode_id'] !== 0) {
      $parent_ref = &$phylonodes[ $node['parent_phylonode_id'] ]; // get
      $parent_ref['branchset'][] = &$node; // append node refernce to branchset
    }
    else {
      $root_phylonode_ref = &$node;
    }
  }
  
  // dump datastructure as json to browser. drupal sets the mime-type correctly.
  drupal_json_output( $root_phylonode_ref );
}

function phylonode_distance_comparator($a, $b) {
  return ($a->length < $b->length) ? -1 : 1;
}


/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_views_api() {
  return array(
    'api' => 3.0,
  );
}


/**
 * Implements hook_search_biological_data_views().
 *
 * Adds the described views to the "Search Data" Page created by Tripal Views
 */
function tripal_phylotree_search_biological_data_views() {
  return array(
    'tripal_phylotree_user_phylotrees' => array(
      'machine_name' => 'tripal_phylotree_user_phylotrees',
      'human_name' => 'Phylotrees',
      'description' => 'Gene trees, species trees, etc.',
      'link' => 'chado/phylotree'
    ),
  );
}


/**
 *  Implements hook_theme().
 *
 * We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_theme($existing, $type, $theme, $path) {
  $core_path = drupal_get_path('module', 'tripal_core');
  $items = array(
     'node__chado_phylotree' => array(
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates",
    ),
    'tripal_phylotree_base' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_base',
      'path' => "$path/theme/templates",
    ),
     'tripal_phylotree_references' => array(
        'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_references',
      'path' => "$path/theme/templates",
     ),
     'tripal_phylotree_organisms' => array(
        'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_organisms',
      'path' => "$path/theme/templates",
    ),
     'tripal_phylotree_radial' => array(
        'variables' => array('node' => NULL),
      'template' => 'tripal_phylotree_radial',
      'path' => "$path/theme/templates",
    ),
  );
  return $items;
}

/**
 * Implements hook_help().
 * Adds a help page to the module list
 *
 * @ingroup tripal_phylotree
 */
function tripal_phylotree_help ($path, $arg) {
  if ($path == 'admin/help#tripal_phylotree') {
    return theme('tripal_phylotree_help', array());
  }
}
